import telebot
import fdb
import random
from telebot import types
from twilio.rest import Client
from bill import pdf

bot = telebot.TeleBot('6284931281:AAHyTEJZmU8guV0FD8OmOGld80x_-cNJEDw')
con = fdb.connect(dsn='database/THEDATA.GDB', user='SYSDBA', password='masterkey')
cur = con.cursor()
bot.set_webhook()
@bot.message_handler(commands=['start', 'nummer'])

def start(message):
    congratulations = f'–í—ñ—Ç–∞—é, {message.from_user.first_name}!\n–Ø, –í–∞—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ö–ü ¬´–ú—ñ—Å—å–∫–≤–æ–¥–æ–∫–∞–Ω–∞–ª¬ª –ú—É–∫–∞—á—ñ–≤—Å—å–∫–æ—ó –º—ñ—Å—å–∫–æ—ó —Ä–∞–¥–∏, \n—Å–ø—Ä–æ–±—É—é –¥–æ–ø–æ–º–æ–≥—Ç–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.'
    bot.send_message(message.chat.id, congratulations, parse_mode='html')
    res = cur.execute("select 1 from bot where user_id = ?", [message.from_user.id]).fetchone()
    if res is not None:
        select_action(message)
    else:
        get_edrpou(message)


def get_edrpou(message):
    edrpou_mess = f'<b>–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –Ñ–î–†–ü–û–£ –≤–∞—à–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó:</b>'
    edrpou_from_user = bot.send_message(message.chat.id, edrpou_mess, parse_mode='html')
    bot.register_next_step_handler(edrpou_from_user, chek_edrpou)

def chek_edrpou(message):

    edrpou_to_save = message.text
    global id
    result = cur.execute("select id from account where edrpou = ?", [edrpou_to_save]).fetchone()
    if result is not None:
        id = result[0]
    res = cur.execute("select 1 from ACCOUNT where edrpou = ?", [edrpou_to_save]).fetchone()
    if res:
        contact(message)
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –∫–æ–¥—É –Ñ–î–†–ü–û–£ –Ω–µ–º–∞—î. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode='html')
        get_edrpou(message)

def contact(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    send_number_button = types.KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    markup.add(send_number_button)
    bot.send_message(message.chat.id, '–î–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó —Ä–æ–±–æ—Ç–∏ –º–µ–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–Ω–∞—Ç–∏ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É". ',reply_markup=markup)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    number = message.contact.phone_number
    send_pass(message, number)
    cur.execute('UPDATE account SET phonenumber = ? WHERE ID = ?', [number, id])
    con.commit()

def send_pass(message, number):
    recevier = number
    account_sid = "ACbf654c21b83e827ddb7702b9787af07d"
    auth_token = "f48cb31a8023a11a5a91820c02bf54e7"
    client = Client(account_sid, auth_token)
    random_password = str(random.randint(100000, 999999))
    send_password = bot.send_message(message.chat.id, "–ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É " + recevier + " –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç —â–æ–± —è –∑–º—ñ–≥ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏.")
    bot.send_message(message.chat.id, random_password)
    #password_message = client.messages.create(
    #    body=f"–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É: {random_password}",
    #    from_="+13158182333",
    #    to=recevier
    #)
    bot.register_next_step_handler(send_password, chek_pass, random_password, recevier)

def chek_pass(message, random_password, number):
    pass_from_user = message.text
    random_password = random_password
    if pass_from_user == random_password:
        insert_into_bot(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        send_pass_button = types.KeyboardButton(text="–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        markup.add(send_pass_button)
        send_new = bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–ª–∏. –ë–∞–∂–∞—î—Ç–µ —â–æ–± —è –Ω–∞–¥—ñ—Å–ª–∞–≤ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ?", reply_markup=markup)
        bot.register_next_step_handler(send_new, send_pass_again, number)

@bot.message_handler(commands=['send'])
def send_pass_again(message, number):
    if message.text == "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ":
        send_pass(message, number)
def insert_into_bot(message):

    res1 = cur.execute('SELECT MAX(id) FROM BOT').fetchone()
    if res1 is not None and res1[0] is not None:
        counter_id = res1[0]+1
    else:
        counter_id = "1"
    cur.execute('INSERT INTO BOT (ID, USER_ID, ACC_ID) VALUES (?, ?, ?)',
                [int(counter_id), str(message.from_user.id), int(id)])
    con.commit()
    select_action(message)
def select_action(message):
    if message.text == "üìù –í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ñ –ø–æ–∫–∞–∑–∞–Ω–Ω—è":
        bot.send_message(message.chat.id, id)
        res = cur.execute("select meter_end from meters where account_id = ?", [id]).fetchone()
        if res is not None:
            meters = res[0]
            bot.send_message(message.chat.id, meters)
            msg_text = "–û—Å—Ç–∞–Ω–Ω—ñ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:" + str(meters) + " –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –ø–æ–∫–∞–∑–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ —Ü—ñ–ª—É —á–∞—Å—Ç–∏–Ω—É —á–∏—Å–ª–∞)"
        lll = bot.send_message(message.chat.id, msg_text)
        bot.register_next_step_handler(lll, insert_meter)
    elif message.text == "‚úÖ–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç":
        act(message)
    elif message.text == "üí∞–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏":
        bill(message)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        meter_btn = types.KeyboardButton("üìù –í–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ñ –ø–æ–∫–∞–∑–∞–Ω–Ω—è")
        akt_btn = types.KeyboardButton("‚úÖ–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç")
        bill_btn = types.KeyboardButton("üí∞–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏")
        markup.row(meter_btn)
        markup.row(akt_btn, bill_btn)
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∏–º —è –º–æ–∂—É –í–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏!", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    select_action(message)
def insert_meter(message):
    meter_reading = int(message.text)
    bot.send_message(message.chat.id, meter_reading)
    cur.execute('UPDATE METERS SET METER_END = ? WHERE ACCOUNT_ID = ?', [meter_reading, id])
    con.commit()
    bot.send_message(message.chat.id, "–ü–æ–∫–∞–∑–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    select_action(message)
def bill(message):
    acc_id
    pdf.table()
    bill_doc = open('–†–ê–•–£–ù–û–ö.pdf', 'rb')
    bot.send_document(message.chat.id, bill_doc)
    bot.send_message(message.chat.id, "–í–∞—à —Ä–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏")

def act(message):
    pdf.table()
    act_doc = open('–ê–ö–¢.pdf', 'rb')
    bot.send_document(message.chat.id, act_doc)
    bot.send_message(message.chat.id, "–í–∞—à –∞–∫—Ç –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö —Ä–æ–±—ñ—Ç")

bot.delete_webhook(drop_pending_updates=True)
bot.polling(none_stop=True)